问题: 
	在Java中Lock接口比synchronized块的优势是什么？你需要实现一个高效的缓存，它允许多个用户读，但只允许一个用户写，以此来保持它的完整性，你会怎样去实现它？
答案: 
	lock接口在多线程和并发编程中最大的优势是它们为读和写分别提供了锁，它能满足你写像ConcurrentHashMap这样的高性能数据结构和有条件的阻塞。Java线程面试的问题越来越会根据面试者的回答来提问。当前其大量用于构建电子交易终统的客户端缓存和交易连接空间。
	
注意点:
1. 锁定和取消锁定出现在不同作用范围中时，必须谨慎地确保保持锁定时所执行的所有代码用 try-finally 或 try-catch 加以保护，以确保在必要时释放锁。
2. Lock 类还可以提供与隐式监视器锁完全不同的行为和语义，如保证排序、非重入用法或死锁检测。如果某个实现提供了这样特殊的语义，则该实现必须对这些语义加以记录。
3. Lock 实例只是普通的对象，其本身可以在 synchronized 语句中作为目标使用。获取 Lock 实例的监视器锁与调用该实例的任何 lock()方法没有特别的关系。为了避免混淆，建议除了在其自身的实现中之外，决不要以这种方式使用 Lock 实例。
4. 除非另有说明，否则为任何参数传递 null 值都将导致抛出 NullPointerException。


这里举一个银行账户的例子:

假设有一个银行账户,儿子只从里面取钱花,爸爸只往里面存钱.可是儿子花的太快,爸爸挣的太慢.当账户资金为负数的时候,则出现警告,终止儿子花钱.此例中,存钱与取钱不能同时进行